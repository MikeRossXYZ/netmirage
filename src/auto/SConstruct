import os
import subprocess
import time

Import('env')
Import('appVersion')

def AutoVersion(target, source, env):
	appVersion['version'] = '%d.%d.%d'%(appVersion['major'], appVersion['minor'], appVersion['revision'])
	if Dir('#.git').exists():
		try:
			commitId = subprocess.check_output(['git', 'log', '--format=%h', '-n 1']).strip()
			print 'Detected git install; using commit version'
			appVersion['version'] = '%s.%s'%(appVersion['version'], commitId)
			
			dirtyRepo = subprocess.call(['git', 'diff-index', '--cached', 'HEAD', '--quiet'])
			if not dirtyRepo:
				dirtyRepo = subprocess.call(['git', 'diff-files', '--quiet'])
				if not dirtyRepo:
					dirtyRepo = subprocess.check_output(['git', 'ls-files', '--exclude-standard', '--others', Dir('#.git').abs_path()]).strip()
			if dirtyRepo:
				print 'Dirty git workspace; using timed version'
				appVersion['version'] = '%s.%d'%(appVersion['version'], int(time.time()))
		except:
			pass
	print 'Version:', appVersion['name'], appVersion['version']
	
	code = '// This file was generated by SConstruct. DO NOT EDIT!\n' + source[0].get_contents()
	for find, replace in appVersion.iteritems():
		code = code.replace('$'+str(find), str(replace))
	with open(str(target[0]), 'w') as output:
		output.write(code)

env.Command(target="version.c", source="version.c.in", action=AutoVersion)
