import os
import subprocess
import time
import SCons.Errors

# Public version information
sneacVersionMajor = 0
sneacVersionMinor = 1
sneacVersionRevision = 1

# Set version based on whether we're using git or not
sneacVersion = '%d.%d.%d'%(sneacVersionMajor, sneacVersionMinor, sneacVersionRevision)
if os.path.isdir('../../.git'):
	try:
		commitId = subprocess.check_output(['git', 'log', '--format=%h', '-n 1']).strip()
		print 'Detected git install; using commit version'
		sneacVersion = '%s.%s'%(sneacVersion, commitId)
		
		dirtyRepo = subprocess.call(['git', 'diff-index', '--cached', 'HEAD', '--quiet'])
		if not dirtyRepo:
			dirtyRepo = subprocess.call(['git', 'diff-files', '--quiet'])
			if not dirtyRepo:
				dirtyRepo = subprocess.check_output(['git', 'ls-files', '--exclude-standard', '--others', '../..']).strip()
		if dirtyRepo:
			print 'Dirty git workspace; using timed version'
			sneacVersion = '%s.%d'%(sneacVersion, int(time.time()))
	except:
		pass
print 'Version: SNEAC ', sneacVersion

# Locate sources
srcDir = Dir('.').srcnode().abspath

# Write version definitions
with open('%s/version.c'%srcDir, 'w') as verFile:
	verFile.write("""
		// This file was generated by SConstruct. DO NOT EDIT!
		#include "version.h"
		const char* getVersionString() { return "SNEAC %s"; }
		const uint16_t getVersionMajor() { return %d; }
		const uint16_t getVersionMinor() { return %d; }
		const uint16_t getVersionRevision() { return %d; }
	""" % (sneacVersion, sneacVersionMajor, sneacVersionMinor, sneacVersionRevision))

# Resolve libxml dependency
try:
	libXmlVersion = subprocess.check_output(['xml2-config', '--version']).strip()
except:
	raise SCons.Errors.UserError, 'Could not locate libxml install location. Ensure that libxml is installed and xml2-config is in the system path.'
libXmlFlags = subprocess.check_output(['xml2-config', '--cflags']).strip()
libXmlLibs = subprocess.check_output(['xml2-config', '--libs']).strip()
print 'Using libxml %s [flags = %s] [libs = %s]'%(libXmlVersion, libXmlFlags, libXmlLibs)

# Build SNEAC
Import('env')
env.Append(CFLAGS = '-Wall -Werror -fmax-errors=10 -std=c11') 
env.Append(CFLAGS = libXmlFlags)
env.Append(LINKFLAGS = libXmlLibs)
env.Append(LINKFLAGS = '-lm')
Import('target')
sneac = env.Program(target, Glob('*.c'))

# Install binaries
env.Install('../../bin', sneac)
